{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password"
      }
    },
    "disablePasswordAuth": {
      "type": "string",
      "defaultValue": "False",
      "allowedValues": [
        "True",
        "False"
      ],
      "metadata": {
        "description": "If the value is set to 'true', then the user may log in with both the password specified AND the SSH Public Keys too.  If the value is set to 'false', then the user may login with the SSH Keys specified only."
      }
    },
    "sshKeyValue1": {
      "type": "string",
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDh4L/ZjJL/Grm1PMAh7HmjEmP2zcu1gc33ZQmuR2sacIiAb2FlVbS+wp/1icmytDwsoNLn/tuOdm9i9rK7oe60m2vYPSb8eDNzpChv11u+HUKV7nTjFFrr9wXtkDjbJsh2s4Q5ZpEMQ4GjvE/W9HY1eAhnSagWADjb3oifEvp0ky6b45aBTWDcabPKslaTKv+qYU+DlegpNzBItGQNzJTx37+0P5YnOO7ZiWhCu1X5DRfGp/q7Udmj3cVrK9wmuXPT/+yPwviTMDRpwaX0V0jx3HRf8TCMbp856RqWtgQrCiztKknJyVbRENCRK7eaPhW1TRVJOdNCHljNW7Qb94+/ imported-openssh-key",
      "metadata": {
        "description": "SSH Key Value #1 for use when logging in with the user defined in the adminUsername parameter"
      }
    },
    "sshKeyValue2": {
      "type": "string",
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDh4L/ZjJL/Grm1PMAh7HmjEmP2zcu1gc33ZQmuR2sacIiAb2FlVbS+wp/1icmytDwsoNLn/tuOdm9i9rK7oe60m2vYPSb8eDNzpChv11u+HUKV7nTjFFrr9wXtkDjbJsh2s4Q5ZpEMQ4GjvE/W9HY1eAhnSagWADjb3oifEvp0ky6b45aBTWDcabPKslaTKv+qYU+DlegpNzBItGQNzJTx37+0P5YnOO7ZiWhCu1X5DRfGp/q7Udmj3cVrK9wmuXPT/+yPwviTMDRpwaX0V0jx3HRf8TCMbp856RqWtgQrCiztKknJyVbRENCRK7eaPhW1TRVJOdNCHljNW7Qb94+/ imported-openssh-key",
      "metadata": {
        "description": "SSH Key Value #2 for use when logging in with the user defined in the adminUsername parameter"
      }
    },
    "sshKeyValue3": {
      "type": "string",
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDh4L/ZjJL/Grm1PMAh7HmjEmP2zcu1gc33ZQmuR2sacIiAb2FlVbS+wp/1icmytDwsoNLn/tuOdm9i9rK7oe60m2vYPSb8eDNzpChv11u+HUKV7nTjFFrr9wXtkDjbJsh2s4Q5ZpEMQ4GjvE/W9HY1eAhnSagWADjb3oifEvp0ky6b45aBTWDcabPKslaTKv+qYU+DlegpNzBItGQNzJTx37+0P5YnOO7ZiWhCu1X5DRfGp/q7Udmj3cVrK9wmuXPT/+yPwviTMDRpwaX0V0jx3HRf8TCMbp856RqWtgQrCiztKknJyVbRENCRK7eaPhW1TRVJOdNCHljNW7Qb94+/ imported-openssh-key",
      "metadata": {
        "description": "SSH Key Value #3 for use when logging in with the user defined in the adminUsername parameter"
      }
    },    
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.0.246.0/23"
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "Subnet-1"
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.247.0/24",
      "metadata": {
        "description": "Must fall within the address space defined by 'Address Space"
      }
    }
  },
  "variables": {
    "vmNamePrefix": "[resourceGroup().name]",
    "shareAccountID": "gtronjshare",
    "shareName": "gshare",
    "storAccountName": "[concat(resourceGroup().name,'sa')]",
    "numberOfInstances": 1,
    "dnsNameforLBIP": "[variables('vmNamePrefix')]",
    "publicIPAddressName": "[concat(variables('vmNamePrefix'),'grhPubIP')]",
    "nicNamePrefix": "[concat(variables('vmNamePrefix'),'grhnic')]",
    "vnetName": "[concat(variables('vmNamePrefix'),'Vnet')]",
    "lbName": "[concat(variables('vmNamePrefix'),'LB')]",
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "imageSKU": "14.04.2-LTS",
    "vmSize": "Standard_D11_V2",
    "storageAccountType": "Standard_LRS",
    "vmStorageAccountContainerName": "vhds",
    "availabilitySetName": "[concat(variables('vmNamePrefix'),'AvSet')]",
    "publicIPAddressType": "Static",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('subnetName'))]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontend')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storAccountName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "properties": { }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[variables('publicIPAddressName')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameforLBIP')]"
        }
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNamePrefix'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/LoadBalancerBackend')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/SSH', copyindex())]"
                }
              ]
            }

          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "name": "[variables('lbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontend",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackend"

          }
        ],
        "inboundNatRules": [
          {
            "name": "SSH0",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 22,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNamePrefix'), copyindex())]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNamePrefix'), copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNamePrefix'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "[parameters('disablePasswordAuth')]",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
                  "keyData": "[parameters('sshKeyValue1')]"
                },
                {
                  "path": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
                  "keyData": "[parameters('sshKeyValue2')]"
                },
                {
                  "path": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
                  "keyData": "[parameters('sshKeyValue3')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('storAccountName'),'.blob.core.windows.net/vhds/',variables('vmNamePrefix'), copyindex(), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicNamePrefix'),copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNamePrefix'), copyIndex(), '/configStor')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extensionLoopNode",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNamePrefix'),0)]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/ExchMaster/Projects/master/GadgetronV2/GadgetronV2/Templates/configStor.sh"
          ],
          "commandToExecute": "[concat('sh configStor.sh ',variables('shareAccountID'),' ',variables('ShareName'),' ',listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('shareAccountID')) ,'2015-06-15').key1)]"
        }
      }
    }/*,
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNamePrefix'), copyIndex(), '/DockerExtension')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extensionLoopNode",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNamePrefix'),0)]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "DockerExtension",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "docker": {
            "port": "",
            "options": [
              ""
            ]
          },
          "compose": {
            "gt01": {
              "image": "gadgetron/ubuntu_1404_no_cuda",
              "environment": [
                "[concat('GADGETRON_RELAY_HOST=',reference(concat(variables('nicNamePrefix'),0)).ipConfigurations[0].properties.privateIPAddress)]"
              ],
              "net": "host",
              "restart": "always"
            }

          }
        }
      }
    } */
  ],
  "outputs": {
    "relayhostip": {
      "value": "[reference(concat(variables('nicNamePrefix'),0)).ipConfigurations[0].properties.privateIPAddress]",
      "type": "string"
    },
    "cmdstring": {
      "value": "[concat('sh configStor.sh ',variables('shareAccountID'),' ',variables('ShareName'),' ',listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('shareAccountID')) ,'2015-06-15').key1)]",
      "type": "string"
    }
  }
}

